See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Spotbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 4 warnings)

Correctness:  70/70 tests passed
Memory:       10/10 tests passed
Timing:       163/163 tests passed

Aggregate score: 100.00%
[Compilation: 5%, API: 5%, Spotbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.9K Jul 21 21:52 BurrowsWheeler.java
1.6K Jul 21 21:52 CircularSuffixArray.java
1.8K Jul 21 21:52 MoveToFront.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac CircularSuffixArray.java
*-----------------------------------------------------------

% javac BurrowsWheeler.java
*-----------------------------------------------------------

% javac MoveToFront.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
CircularSuffixArray:

BurrowsWheeler:

MoveToFront:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for CircularSuffixArray.java
*-----------------------------------------------------------

% custom checkstyle checks for BurrowsWheeler.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:31: Do not call either 'BinaryStdOut.flush()' or 'BinaryStdOut.close()' more than once in 'transform()'. [MethodCallCount]
[WARN] BurrowsWheeler.java:79: Do not call either 'BinaryStdOut.flush()' or 'BinaryStdOut.close()' more than once in 'inverseTransform()'. [MethodCallCount]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for MoveToFront.java
*-----------------------------------------------------------
[WARN] MoveToFront.java:28: Do not call either 'BinaryStdOut.flush()' or 'BinaryStdOut.close()' more than once in 'encode()'. [MethodCallCount]
[WARN] MoveToFront.java:42: Do not call either 'BinaryStdOut.flush()' or 'BinaryStdOut.close()' more than once in 'decode()'. [MethodCallCount]
Checkstyle ends with 0 errors and 2 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of CircularSuffixArray
*-----------------------------------------------------------
Running 17 total tests.

Test 0: check index() and length() with strings from text files
  * abra.txt
  * weekend.txt
  * banana.txt
==> passed

Test 1: check index() and length() with random binary strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 2: check index() and length() with random uppercase strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 3: check index() and length() with random ASCII strings (excluding 0x00')
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 4: check index() and length() with random ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 5: check index() and length() with random extended ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 6: check index() and length() with strings from text files
  * cadabra.txt
  * amendments.txt
  * moby1.txt
  * dickens1000.txt
==> passed

Test 7: check index() and length() with strings from binary files
  * us.gif
  * CS_bricks.jpg
  * rand1K.bin
==> passed

Test 8: check index() and length() with random strings of length 0, 1, and 2
  * length = 0
  * length = 1
  * length = 2
==> passed

Test 9: check that index() throws an exception when argument is out of bounds
  * string of length 10
  * string of length 100
  * string of length 2
  * string of length 1
  * string of length 0
==> passed

Test 10: check that constructor throws an exception when argument is null
==> passed

Test 11: check that two CircularSuffixArray objects can be created at the same time
  * cadabra.txt and amendments.txt
  * amendments.txt and cadabra.txt
  * dickens1000.txt and cadabra.txt
==> passed

Test 12: check that CircularSuffixArray is immutable
  * string = "PYSXUOFXCOCNJCVGKIYHQJJBSRDFBD"
  * string = "BAAAABABABAAABBBBBBAABAABAABBA"
  * string = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  * string = hex representation: 2a 40 91 33 88 8b b9 ee 09 1a e9 f2 98 0e 3c 
==> passed

Test 13: check index() and length() with corner-case strings
  * a.txt
  * nomatch.txt
  * zebra.txt
  * alphanum.txt
==> passed

Test 14: check index() and length() with strings that are nontrivial
         circular suffixes of themselves
  * stars.txt
  * couscous.txt
==> passed

Test 15: check index() and length() with unary strings
  * length 10 string over unary alphabet
  * length 100 string over unary alphabet
  * length 1000 string over unary alphabet
==> passed

Test 16: check index() and length() with random strings
         that are nontrivial circular suffixes of themselves
  * length 2 string over binary alphabet, repeated 2 times
  * length 2 string over binary alphabet, repeated 10 times
  * length 5 string over binary alphabet, repeated 2 times
  * length 5 string over binary alphabet, repeated 3 times
  * length 5 string over binary alphabet, repeated 5 times
  * length 7 string over uppercase alphabet, repeated 2 times
  * length 7 string over uppercase alphabet, repeated 3 times
  * length 7 string over uppercase alphabet, repeated 5 times
==> passed

Total: 17/17 tests passed!


================================================================
Testing correctness of MoveToFront
*-----------------------------------------------------------
Running 25 total tests.

Test 1a: check main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 1b: check main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 3a: check that main() is consistent with encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
==> passed

Test 3b: check that main() is consistent with decode() on text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 4a: check encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 4b: check encode() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4c: check encode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4d: check encode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check decode() on move-to-front-encoded text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
  * stars.txt.mtf
  * alphanum.txt.mtf
  * a.txt.mtf
==> passed

Test 5b: check decode() on move-to-front encoded binary files
  * us.gif.mtf
  * CS_bricks.jpg.mtf
  * rand10K.bin.mtf
==> passed

Test 5c: check decode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5d: check decode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5e: check decode() on random inputs
         that were encoded with move-to-front
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5f: check decode() on more random inputs
         that were encoded with move-to-front
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check whether decode(encode()) = original on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 6b: check whether decode(encode()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6c: check that decode(encode()) = original on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 100 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 6d: check that decode(encode()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 7a: check that encode() calls either close() or flush()
  * abra.txt
  * zebra.txt
  * amendments.txt
==> passed

Test 7b: check that decode() calls either close() or flush()
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
==> passed

Test 8a: check encode() on large files
  * aesop.txt
  * rand100K.bin
  * world192.txt
==> passed

Test 8b: check decode() on large files
  * aesop.txt.mtf
  * rand100K.bin.mtf
  * world192.txt.mtf
==> passed

Test 8c: check whether decode(encode()) = original on large files
  * aesop.txt
  * rand100K.bin
  * world192.txt
==> passed


Total: 25/25 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference CircularSuffixArray)
********************************************************************************

Testing correctness of BurrowsWheeler
*-----------------------------------------------------------
Running 28 total tests.

Test 1a: check main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 1b: check main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 2a: check parsing of argument "-" in main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 2b: check parsing of argument "+" in main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 3a: check that main() is consistent with transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 3b: check that main() is consistent with inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 4a: check transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 4b: check transform() on corner-case text files
  * alphanum.txt
  * a.txt
==> passed

Test 4c: check transform() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 4d: check transform() on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 4e: check transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4f: check tranform() on random inputs that are circular
         shifts of themselves
  * 5 random strings from unary alphabet
  * 5 random strings from binary alphabet
  * 5 random strings from DNA alphabet
  * 5 random strings from uppercase alphabet
==> passed

Test 5a: check inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 5b: check inverseTransform() on corner-case text files
  * alphanum.txt.bwt
  * a.txt.bwt
  * stars.txt.bwt
  * couscous.txt.bwt
==> passed

Test 5c: check inverseTransform() on binary files
  * us.gif.bwt
  * CS_bricks.jpg.bwt
  * rand10K.bin.bwt
==> passed

Test 5d: check inverseTransform() of transform() on random inputs
  * 10 random characters from unary alphabet
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 100 random characters from unary alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 5e: check inverseTransform() of transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check that inverseTransform(transform()) = original on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 6b: check that inverseTransform(transform()) = original on corner-case text files
  * alphanum.txt
  * a.txt
  * stars.txt
  * couscous.txt
==> passed

Test 6c: check that inverseTransform(transform()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 6d: check that inverseTransform(tranform()) = original on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 6e: check that inverseTransform(tranform()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6f: check that inverseTransform(tranform()) = original
         on random inputs that are circular shifts of themselves
  * random strings from unary alphabet
  * random strings from binary alphabet
  * random strings from DNA alphabet
  * random strings from uppercase alphabet
==> passed

Test 7a: check that transform() calls either close() or flush()
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 7b: check that inverseTransform() calls either close() or flush()
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 8a: check transform() on large files
  * aesop.txt
  * rand100K.bin
  * world192.txt
==> passed

Test 8b: check inverseTransform() on large files
  * aesop.txt.bwt
  * rand100K.bin.bwt
  * world192.txt.bwt
==> passed

Test 8c: check that inverseTransform(transform()) = original on large files
  * aesop.txt
  * rand100K.bin
  * world192.txt
==> passed


Total: 28/28 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of CircularSuffixArray
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of a CircularSuffixArray for a random string of length n.
Maximum allowed memory is 64n + 128.

                 n        bytes
-------------------------------
=> passed       16          560
=> passed       32         1072
=> passed       64         2096
=> passed      128         4144
=> passed      256         8240
=> passed      512        16432
=> passed     1024        32816
=> passed     2048        65584
=> passed     4096       131120
=> passed     8192       262192
==> 10/10 tests passed

Total: 10/10 tests passed!

Estimated student memory (bytes) = 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing CircularSuffixArray
*-----------------------------------------------------------
Running 26 total tests.

Tests  1-13: time to create a circular suffix array for the first
             n character of dickens.txt and call index(i) for each i

            [ max allowed time = 10 seconds and <= 12x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00      10.88
=> passed     2000       0.00       0.00       4.35
=> passed     4000       0.00       0.00       4.57
=> passed     8000       0.01       0.00       3.44
=> passed    16000       0.01       0.00       4.45
=> passed    32000       0.02       0.00       5.43
=> passed    64000       0.07       0.01      10.99
=> passed   128000       0.17       0.01      15.27
=> passed   256000       0.22       0.02       9.72
=> passed   512000       0.45       0.05       9.08
=> passed  1024000       1.01       0.11       9.35
=> passed  2048000       2.18       0.24       8.96
=> passed  4096000       5.34       0.58       9.14

Estimated running time (using last 6 measurements)
    = 7.61e-07 * n^1.02  (R^2 = 0.98)


Tests 14-26: time to create circular suffix array for n random ASCII characters
            and call index(i) for each i

            [ max allowed time = 10 seconds and <= 20x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       7.43
=> passed     2000       0.00       0.00       4.75
=> passed     4000       0.00       0.00       4.79
=> passed     8000       0.00       0.00       7.03
=> passed    16000       0.01       0.00       9.83
=> passed    32000       0.01       0.00      12.16
=> passed    64000       0.03       0.00      13.26
=> passed   128000       0.06       0.00      12.14
=> passed   256000       0.14       0.01       9.79
=> passed   512000       0.29       0.03      10.38
=> passed  1024000       0.67       0.05      14.06
=> passed  2048000       1.54       0.10      16.12
=> passed  4096000       3.70       0.23      15.87

Estimated running time (using last 6 measurements)
    = 4.80e-08 * n^1.19  (R^2 = 1.00)


Total: 26/26 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MoveToFront
*-----------------------------------------------------------
Running 40 total tests.

Test 1: count calls to methods in BinaryStdOut from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in BinaryStdOut from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Test 3: count calls to methods in BinaryStdIn from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 4: count calls to methods in BinaryStdIn from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Tests  5-14: Timing encode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       2.53
=> passed     2000       0.01       0.00       3.44
=> passed     4000       0.01       0.00       3.29
=> passed     8000       0.02       0.01       3.20
=> passed    16000       0.05       0.01       3.19
=> passed    32000       0.09       0.03       3.13
=> passed    64000       0.18       0.06       3.11
=> passed   128000       0.35       0.11       3.06
=> passed   256000       0.70       0.24       2.97

Estimated running time (using last 6 measurements)
     = 4.09e-06 * n^0.97  (R^2 = 1.00)


Tests  15-22: Timing encode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       3.01
=> passed     2000       0.00       0.00       2.95
=> passed     4000       0.01       0.00       2.91
=> passed     8000       0.02       0.01       2.88
=> passed    16000       0.04       0.01       2.89
=> passed    32000       0.08       0.03       2.93
=> passed    64000       0.15       0.05       2.86
=> passed   128000       0.30       0.11       2.87
=> passed   256000       0.61       0.21       2.86

Estimated running time (using last 6 measurements)
     = 2.60e-06 * n^0.99  (R^2 = 1.00)


Tests 23-31: Timing decode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       2.37
=> passed     2000       0.00       0.00       2.30
=> passed     4000       0.01       0.00       2.31
=> passed     8000       0.02       0.01       2.38
=> passed    16000       0.03       0.01       2.30
=> passed    32000       0.07       0.03       2.37
=> passed    64000       0.13       0.06       2.34
=> passed   128000       0.26       0.11       2.33
=> passed   256000       0.51       0.22       2.32

Estimated running time (using last 6 measurements)
     = 2.43e-06 * n^0.98  (R^2 = 1.00)


Tests 32-40: Timing decode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       2.50
=> passed     2000       0.00       0.00       2.40
=> passed     4000       0.01       0.00       2.37
=> passed     8000       0.02       0.01       2.40
=> passed    16000       0.03       0.01       2.34
=> passed    32000       0.06       0.03       2.35
=> passed    64000       0.13       0.05       2.34
=> passed   128000       0.25       0.11       2.35
=> passed   256000       0.50       0.21       2.35

Estimated running time (using last 6 measurements)
     = 2.06e-06 * n^1.00  (R^2 = 1.00)


Total: 40/40 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference CircularSuffixArray)
********************************************************************************

Timing BurrowsWheeler
*-----------------------------------------------------------
Running 97 total tests.

Test 1: count calls to methods in CircularSuffixArray from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in CircularSuffixArray from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3: count calls to methods in BinaryStdOut from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 4: count calls to methods in BinaryStdOut from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 5: count calls to methods in BinaryStdIn from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 6: count calls to methods in BinaryStdIn from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Tests  7-19: timing transform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.14
=> passed     2000       0.00       0.00       0.52
=> passed     4000       0.00       0.00       0.41
=> passed     8000       0.00       0.00       0.46
=> passed    16000       0.00       0.00       0.43
=> passed    32000       0.00       0.01       0.49
=> passed    64000       0.01       0.01       0.56
=> passed   128000       0.01       0.02       0.75
=> passed   256000       0.03       0.03       0.98
=> passed   512000       0.06       0.06       1.02
=> passed  1024000       0.13       0.13       0.98
=> passed  2048000       0.29       0.29       0.99
=> passed  4096000       0.64       0.66       0.97

Estimated running time as a function of n (using last 6 measurements)
    = 3.45e-08 * n^1.10  (R^2 = 1.00)


Tests 20-32: timing transform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.80
=> passed     2000       0.00       0.00       0.95
=> passed     4000       0.00       0.00       0.97
=> passed     8000       0.00       0.00       0.97
=> passed    16000       0.00       0.00       1.03
=> passed    32000       0.00       0.00       1.02
=> passed    64000       0.01       0.01       1.08
=> passed   128000       0.02       0.02       0.99
=> passed   256000       0.03       0.03       1.00
=> passed   512000       0.07       0.07       1.02
=> passed  1024000       0.15       0.15       1.01
=> passed  2048000       0.33       0.33       1.00
=> passed  4096000       0.78       0.77       1.01

Estimated running time as a function of n (using last 6 measurements)
    = 2.76e-08 * n^1.12  (R^2 = 1.00)


Tests 33-45: timing transform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.79
=> passed     2000       0.00       0.00       1.21
=> passed     4000       0.00       0.00       0.90
=> passed     8000       0.00       0.00       1.00
=> passed    16000       0.00       0.00       0.98
=> passed    32000       0.00       0.00       0.67
=> passed    64000       0.00       0.00       1.00
=> passed   128000       0.00       0.00       0.96
=> passed   256000       0.01       0.01       0.93
=> passed   512000       0.01       0.01       0.97
=> passed  1024000       0.02       0.02       0.97
=> passed  2048000       0.04       0.04       0.97
=> passed  4096000       0.08       0.09       0.95

Estimated running time as a function of n (using last 6 measurements)
    = 1.87e-08 * n^1.00  (R^2 = 1.00)


Tests 46-58: timing inverseTransform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.59
=> passed     2000       0.00       0.00       0.31
=> passed     4000       0.00       0.00       0.32
=> passed     8000       0.00       0.00       0.31
=> passed    16000       0.00       0.00       0.31
=> passed    32000       0.00       0.00       0.59
=> passed    64000       0.00       0.00       0.67
=> passed   128000       0.00       0.01       0.70
=> passed   256000       0.01       0.01       0.81
=> passed   512000       0.02       0.01       1.17
=> passed  1024000       0.04       0.03       1.20
=> passed  2048000       0.08       0.07       1.16
=> passed  4096000       0.24       0.18       1.37

Estimated running time as a function of n (using last 6 measurements)
    = 4.50e-09 * n^1.16  (R^2 = 0.99)


Tests 59-71: timing inverseTransform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       1.04
=> passed     2048       0.00       0.00       1.29
=> passed     4096       0.00       0.00       1.32
=> passed     8192       0.00       0.00       1.33
=> passed    16384       0.00       0.00       1.31
=> passed    32768       0.00       0.00       1.32
=> passed    65536       0.00       0.00       1.29
=> passed   131072       0.00       0.00       1.38
=> passed   262144       0.01       0.01       1.35
=> passed   524288       0.02       0.02       1.15
=> passed  1048576       0.04       0.03       1.17
=> passed  2097152       0.09       0.08       1.21
=> passed  4194304       0.31       0.34       0.90

Estimated running time as a function of n (using last 6 measurements)
    = 1.02e-09 * n^1.27  (R^2 = 1.00)


Tests 72-84: timing inverseTransform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       1.26
=> passed     2000       0.00       0.00       1.34
=> passed     4000       0.00       0.00       1.31
=> passed     8000       0.00       0.00       1.33
=> passed    16000       0.00       0.00       1.33
=> passed    32000       0.00       0.00       1.40
=> passed    64000       0.00       0.00       1.38
=> passed   128000       0.00       0.00       1.36
=> passed   256000       0.01       0.00       1.37
=> passed   512000       0.01       0.01       1.36
=> passed  1024000       0.03       0.02       1.37
=> passed  2048000       0.05       0.04       1.36
=> passed  4096000       0.10       0.07       1.37

Estimated running time as a function of n (using last 6 measurements)
    = 2.38e-08 * n^1.00  (R^2 = 1.00)


Tests 85-97: timing inverseTransform() with first n character of cyclic.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       1.16
=> passed     2048       0.00       0.00       1.32
=> passed     4096       0.00       0.00       1.30
=> passed     8192       0.00       0.00       1.31
=> passed    16384       0.00       0.00       1.33
=> passed    32768       0.00       0.00       1.38
=> passed    65536       0.00       0.00       1.35
=> passed   131072       0.00       0.00       1.36
=> passed   262144       0.01       0.00       2.21
=> passed   524288       0.02       0.02       1.20
=> passed  1048576       0.05       0.04       1.19
=> passed  2097152       0.08       0.06       1.30
=> passed  4194304       0.16       0.16       1.01

Estimated running time as a function of n (using last 6 measurements)
    = 1.10e-08 * n^1.09  (R^2 = 0.99)


Total: 97/97 tests passed!


================================================================



